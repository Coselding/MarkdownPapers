options {
    LOOKAHEAD = 1;
    STATIC = false;
    UNICODE_INPUT = true;

    MULTI = true;
    /*
    NODE_EXTENDS = "org.tautua.markdownpapers.Node";
    */
    NODE_PREFIX = "";
    NODE_DEFAULT_VOID = true;
    NODE_USES_PARSER = false;

    DEBUG_PARSER = true;
    DEBUG_TOKEN_MANAGER = true;
    DEBUG_LOOKAHEAD = false;
}

PARSER_BEGIN(Parser)
package org.tautua.markdownpapers.grammar;

import org.tautua.markdownpapers.grammar.util.*;

public class Parser {
    private static final String QUOTE = '"' + "";
    private int quoteBlockLevel = 0;
    private Stack<String> markupStack = new DequeStack();

    int ident;
    int delta;

    public Object parse() throws ParseException {
        Document();
        return jjtree.rootNode();
    }

    char getEscapedChar(Token t) {
        return t.image.charAt(1);
    }

    String getValue(Token t) {
        if (t.kind == LINKREF_ID) {
            return t.image.substring(1, t.image.length() - 2);
        } else if (t.kind == CODE_SPAN && t.image.startsWith("``")) {
            return getValue(t, 2);            
        }
        return getValue(t, 1);
    }

    LinkAttr getLinkAttr(Token t) {
        String[] v = t.image.substring(1, t.image.length() - 1).split(" ");
        if (v != null && v.length == 1) {
            return new LinkAttr(v[0].replace("<", "").replace(">",""));
        } else if (v.length == 2 && v[1].startsWith(QUOTE) && v[1].endsWith(QUOTE)) {
            return new LinkAttr(v[0], v[1].substring(1, v[1].length() - 1));
        }

        return null;
    }

    String getValue(Token t, int markLength) {
        return t.image.substring(markLength, t.image.length() - markLength);
    }


    boolean LineLookahead() {
        int level = 0;
        int i = 1;
        Token t = getToken(i);

        if (t.kind != EOL) {
            return false;
        }

        do {
            t = getToken(++i);
            if(t.kind == GT) {
                level++;
            }
        } while (t.kind == SPACE || t.kind == TAB || t.kind == GT);

        if (t.kind == EOL || t.kind == EOF) {
            return false;
        }

        if (quoteBlockLevel < level) {
            return false;
        }

        return true;
    }

    boolean CodeLineLookahead() {
        int level = 0;
        int i = 1;
        int _ident = 0;
        Token t = getToken(i);

        if (t.kind != EOL) {
            return false;
        }

        do {
            t = getToken(++i);
            if(t.kind == GT) {
                level++;
                _ident = 0;
            } else if(t.kind == SPACE) {
                _ident++;
            } else if(t.kind == TAB) {
                _ident += 4;
            }
        } while ( (t.kind == SPACE || t.kind == TAB || t.kind == GT)
            && ((level == 0 && _ident < 4) || (level > 0 && _ident <= 4)) );

        if (t.kind == EOL || t.kind == EOF) {
            return true;
        }

        if ( ((level == 0 && _ident >= 4) || (level > 0 && _ident > 4))
            && level <= quoteBlockLevel ) {
            return true;
        }

        return false;
    }

    boolean QuotedElementLookahead() {
        int level = 0;
        int i = 1;
        Token t = getToken(i);

        if (t.kind != EOL) {
            return false;
        }

        do {
            t = getToken(++i);
            if (t.kind == GT) {
                level++;
            }
        } while (t.kind == SPACE || t.kind == TAB || t.kind == GT);

        if (t.kind == EOL || t.kind == EOF) {
            return true;
        }

        if (quoteBlockLevel <= level) {
            return true;
        }

        return false;
    }

    boolean ItemLookahead() {
        int level = 0;
        int _ident = 0;
        int i = 1;
        Token t = getToken(i);

        if (t.kind != EOL) {
            return false;
        }

        do {
            t = getToken(++i);
            if (t.kind == GT) {
                level++;
            } else if (t.kind == SPACE) {
                _ident++;
            } else if (t.kind == TAB) {
                _ident += 4;
            }
        } while (t.kind == SPACE || t.kind == TAB || t.kind == GT);

        if ((t.kind == LI_PLUS || t.kind == LI_MINUS || t.kind == LI_ASTERISK || t.kind == LI_NUMBER)
            && (_ident > ident - delta || _ident == ident)) {
            return true;
        }

        return false;
    }

    boolean ListLookahead() {
        int level = 0;
        int _ident = 0;
        int i = 1;
        Token t = getToken(i);

        if (t.kind != EOL) {
            return false;
        }

        do {
            t = getToken(++i);
            if (t.kind == GT) {
                level++;
            } else if (t.kind == SPACE) {
                _ident++;
            } else if (t.kind == TAB) {
                _ident += 4;
            }
        } while (t.kind == SPACE || t.kind == TAB || t.kind == GT);

        if ((t.kind == LI_PLUS || t.kind == LI_MINUS || t.kind == LI_ASTERISK || t.kind == LI_NUMBER)
            && _ident > ident) {
            return true;
        }
        
        return false;
    }

    boolean oneOf(Token token, int... kinds) {
        for (int kind : kinds) {
            if(kind == token.kind) {
                return true;
            }
        }
        return false;
    }

    boolean noneOf(Token token, int... kinds) {
        return !oneOf(token, kinds);
    }
}
PARSER_END(Parser)

TOKEN_MGR_DECLS : {
    boolean expectBlockEnd;
    int spaces = 0;
    int ident = 0;

    public int getLexicalState() {
        return curLexState;
    }

    void HandleSpace() {
        if (curLexState == DEFAULT) {
            spaces++;
            if (spaces == 4) {
                spaces = 0;
                SwitchTo(CODE_FOLLOWS);
            }
        }
    }

    void HandleTAB() {
        if (curLexState == DEFAULT && spaces == 0) {
            SwitchTo(CODE_FOLLOWS);
        }
    }

    void HandleEOL() {
        if (curLexState != TEXT_FOLLOWS && curLexState != LI_FOLLOWS) {
            SwitchTo(DEFAULT);
        } else if (expectBlockEnd) {
            expectBlockEnd = false;
            SwitchTo(DEFAULT);
        } else {
            expectBlockEnd = true;
        }

        spaces = 0;
    }

    void HandleContent() {
        if (curLexState == DEFAULT) {
            SwitchTo(TEXT_FOLLOWS);
        }
        expectBlockEnd = false;
    }
}

<*>
TOKEN : {
    < SPACE : " " > { HandleSpace(); }
    | < TAB : "\t" > { HandleTAB(); }
    | < EOL : "\r" | "\n" | "\r\n" > { HandleEOL(); }
}

<DEFAULT>
TOKEN : {
    < HASH : ("#"){1,6} > : HEADER_FOLLOWS
    | < LINKREF_ID : "[" ( ~["]", " ", "\t"] )* "]" ":" > : LINKREF_FOLLOWS
}

<DEFAULT, LI_FOLLOWS>
TOKEN : {
    < LI_PLUS : "+" " " > : LI_FOLLOWS
    | < LI_MINUS : "-" " " > : LI_FOLLOWS
    | < LI_ASTERISK : "*" " " > : LI_FOLLOWS
    | < LI_NUMBER : ( ["0"-"9"] )+ "." " " > : LI_FOLLOWS
}

<DEFAULT, TEXT_FOLLOWS, LI_FOLLOWS>
TOKEN : {
    < UNDERSCORE_RULER : ( ( (" "){1,3} )? "_" ){2} ( ( (" "){1,3} )? "_" )+ >
    | < MINUS_RULER : ( ( (" "){1,3} )? "-" ){2} ( ( (" "){1,3} )? "-" )+ >
    | < ASTERISK_RULER : ( ( (" "){1,3} )? "*" ){2} ( ( (" "){1,3} )? "*" )+ >
}

<DEFAULT, HEADER_FOLLOWS, TEXT_FOLLOWS, LI_FOLLOWS, LINKREF_FOLLOWS>
TOKEN : {
    < QUOTED_TEXT : "\"" ( ~["\"", "\r", "\n"] )+ "\""
                    | "'" ( ~["'", "\r", "\n"] )+ "'" >
}

<DEFAULT, HEADER_FOLLOWS, TEXT_FOLLOWS, LI_FOLLOWS>
TOKEN : {
    < ESCAPED_CHAR : "\\" ["{", "}", "[", "]", "(", ")"
                        , "\\", "`", "_", ">", "#", ".", "!"
                        , "+", "-", "*"] > { HandleContent(); }
    | < CODE_SPAN : "`" ( ~["`"] )+ "`" | "`" "`" ( ~["'"] )+ "`" "`" > { HandleContent(); }
    | < EMPHASIS_ITALIC : "*" <EMP_A> ( ~["*"] )+ <EMP_A> "*"
                    | "_" <EMP_U> ( ~["_"] )+ <EMP_U> "_"> { HandleContent(); }
    | < EMPHASIS_BOLD : "**" <EMP_A> ( ~["*"] )+ <EMP_A> "**"
                    | "__" <EMP_U> ( ~["_"] )+ <EMP_U> "__"> { HandleContent(); }
    | < EMPHASIS_ITALIC_BOLD : "***" <EMP_A> ( ~["*"] )+ <EMP_A> "***"
                    | "___" <EMP_U> ( ~["_"] )+ <EMP_U> "___"> { HandleContent(); }
    | < INLINE_LINK : "[" ( ~["]", "\r", "\n"] )+ "]" > { HandleContent(); }
    | < INLINE_LINK_ATTR : "(" ( ~[")", "\r", "\n"] )+ ")" > { HandleContent(); }
    | < AMP : "&" > { HandleContent(); }
    | < GT : ">" > /* { HandleContent(); } */
    | < LT : "<" > { HandleContent(); }
    | < LBRACE : "(" > { HandleContent(); }
    | < RBRACE : ")" > { HandleContent(); }
    | < LBRACKET : "[" > { HandleContent(); }
    | < RBRACKET : "]" > { HandleContent(); }
    | < TAG_END_OPEN : "<" "/" >
    | < EMPTY_TAG_CLOSE : "/" ">" >
    | < EQ : "=" >
    | < COLON : ":" > { HandleContent(); }
    | < SLASH : "/" > { HandleContent(); }
    | < BACKSLASH : "\\" > { HandleContent(); }
    | < CHAR_ENTITY_REF : "&" ( ["a"-"z", "A"-"Z"] )+ ";" > { HandleContent(); }
    | < NUMERIC_CHAR_REF : "&" ( ( ["0"-"9"] ){1,4} | "x" ( ["0"-"9", "a"-"f", "A"-"F"] ){1,4} ) ";" > { HandleContent(); }
    | < TEXT : ( ~["=", "#", "&", ":", "<", ">", "(", ")", "[", "]", " ", "\\", "/", "\t", "\r", "\n"] )+ > { HandleContent(); }
    | < #EMP_A : ~["*", " ", "\t", "\r", "\n"] >
    | < #EMP_U : ~["_", " ", "\t", "\r", "\n"] >
}

<CODE_FOLLOWS>
TOKEN : {
    < CODE_TEXT : ~["\r", "\n"] > : CODE_FOLLOWS
}

<LINKREF_FOLLOWS>
TOKEN : {
    < URL : ( ~[" ", "\"", "\t", "\r", "\n"] )+ >
}

void Document() #Document : {} {
    (
    <EOL>
    | Element() ( LOOKAHEAD(2) <EOL> Element() )*
    )*
    <EOF>
}

void Element() : {} {
    BlockElement() | DocumentElement()
}

void DocumentElement() : {} {
    LinkRef()
}

void BlockElement() : {} {
    Header()
    | LOOKAHEAD( BlankLine() (<EOL> | <EOF>) ) BlankLine()
    | LOOKAHEAD( ( <UNDERSCORE_RULER> | <MINUS_RULER> | <ASTERISK_RULER>) (<EOL>|<EOF>) ) Ruler()
    | LOOKAHEAD( ( <SPACE> <SPACE> <SPACE> <SPACE> | <TAB> ) ( <SPACE> | <TAB> )* <CODE_TEXT> ) Code()
    | LOOKAHEAD( QuotePrefix() ) Quote()
    | LOOKAHEAD( ( <SPACE> | <TAB> )* ( <LI_PLUS> | <LI_MINUS> | <LI_ASTERISK> | <LI_NUMBER> ) ) List()
    | LOOKAHEAD( Tag() ) Tag()
    | Paragraph()
}

void BlankLine() : {} {
    ( <SPACE> | <TAB> )+
}

void Header() #Header : {} {
    <HASH> Line()
}

void Ruler() #Ruler : {} {
    <UNDERSCORE_RULER> | <MINUS_RULER> | <ASTERISK_RULER>
}

void Quote() #Quote : {
    quoteBlockLevel++;
} {
    QuotePrefix() BlockElement()
    ( LOOKAHEAD( {QuotedElementLookahead()} ) <EOL>
        (
            LOOKAHEAD( QuotePrefix() ) QuotePrefix() ( BlockElement() )?
            | BlankLine()
        )?
    )*
    { quoteBlockLevel--; }
}

void QuotePrefix() : {} {
    ( <SPACE>| <TAB> )* <GT> 
}

void Code() #Code : {} {
    CodeLine()
    ( LOOKAHEAD( {CodeLineLookahead()} ) <EOL>
        (
            LOOKAHEAD( ( QuotePrefix() )* ( BlankLine() )? (<EOL>|<EOF>) )
            ( LOOKAHEAD( QuotePrefix() ) QuotePrefix() )* ( BlankLine() )? #Line
            | ( LOOKAHEAD( QuotePrefix() )
                (
                    LOOKAHEAD( QuotePrefix() ) QuotePrefix() )+ <SPACE>
                )? CodeLine()
        )
    )*
}

void CodeLine() #Line : {} {
    ( <SPACE> <SPACE> <SPACE> <SPACE> | <TAB> ) CodeText()
}

void CodeText() #Text : {
    Token t;
} {
    (
        t = <SPACE> { jjtThis.append(t.image); }
        | t = <TAB> { jjtThis.append(t.image); }
    )*
    t = <CODE_TEXT> { jjtThis.append(t.image); }
    (
        t = <SPACE> { jjtThis.append(t.image); }
        | t = <TAB> { jjtThis.append(t.image); }
        | t = <CODE_TEXT> { jjtThis.append(t.image); }
    )*
}

void LinkRef() #LinkRef : {
    Token i, u, t = null;
} {
    i = <LINKREF_ID> { jjtThis.setId(getValue(i)); }
    ( <SPACE> | <TAB> )*
    u = <URL>
    ( <SPACE> | <TAB> )*
    ( t = <QUOTED_TEXT> )?
    { jjtThis.setAttr(new LinkAttr(u.image, t == null ? null : getValue(t))); }
}

void List() #List : {
    int oldIdent = ident;
    int oldDelta = delta;
} {
    (
        <SPACE> { ident++; }
        | <TAB> { ident += 4; }
        | <GT> { ident = 0; }
    )*          { delta = ident - oldIdent; }
    Item() ( LOOKAHEAD( {ItemLookahead()} ) <EOL> ( <SPACE> | <TAB> | <GT> )* Item() )*
    {
        ident = oldIdent;
        delta = oldDelta;
    }
}

void Item() #Item : {} {
    ( <LI_PLUS> | <LI_MINUS> | <LI_ASTERISK> | <LI_NUMBER> )
    ( Line() ( LOOKAHEAD( <EOL> ( <SPACE> | <TAB> )* <TEXT> ) <EOL> Line() )* #Paragraph(>1) )
    ( LOOKAHEAD( {ListLookahead()} ) <EOL> List() )?
}

void Paragraph() #Paragraph : {} {
    Line() ( LOOKAHEAD( {LineLookahead()} ) <EOL> ( <SPACE> | <TAB> | <GT> )* Line() )*
}

void Line() #Line : {} {
    (
        (
        CharRef()
        | CodeSpan()
        | Emphasis()
        | LOOKAHEAD( InlineURL() ) InlineURL()
        | LOOKAHEAD( Tag() ) Tag()
        | InlineLink()
        | Text()
        )
    )+
}

void Text() #Text : {
    Token t;
} {
        t = <ESCAPED_CHAR> { jjtThis.append(getEscapedChar(t)); }
        | (
            t = <TEXT>
            | t = <SPACE>
            | t = <TAB>
            | t = <AMP>
            | t = <LBRACE>
            | t = <RBRACE>
            | t = <LBRACKET>
            | t = <RBRACKET>
            | t = <COLON>
            | t = <SLASH>
            | t = <BACKSLASH>
            | t = <GT>
            | t = <LT>
            | t = <EQ>
        ) { jjtThis.append(t.image); }
}

void CharRef() #CharRef : {
    Token t;
} {
    ( t = <NUMERIC_CHAR_REF> | t = <CHAR_ENTITY_REF> ) { jjtThis.setValue(t.image); }
}

void CodeSpan() #CodeSpan : {
    Token t;
} {
    t = <CODE_SPAN> { jjtThis.setText(getValue(t)); }
}

void Emphasis() #Emphasis : {
    Token t;
    int markLength = 1;
} {
    (
        t = <EMPHASIS_ITALIC>
        | t = <EMPHASIS_BOLD> { markLength = 2; jjtThis.makeBold(); }
        | t = <EMPHASIS_ITALIC_BOLD> { markLength = 3; jjtThis.makeItalicAndBold(); }
    ) { jjtThis.setText(getValue(t, markLength)); }
}

void InlineURL() #InlineUrl : {
    Token t;
    StringBuilder buff = new StringBuilder();
} {
    <LT>
    t = <TEXT> { buff.append(t.image); }
    ":" { buff.append(":"); }
    ( "/" { buff.append("/"); } )*
    t = <TEXT> { buff.append(t.image); }
    (
        t = <TEXT> { buff.append(t.image); }
        | "/" { buff.append("/"); }
        | "&" { buff.append("&"); }
        | "=" { buff.append("="); }
    )*
    ( <GT> | <EMPTY_TAG_CLOSE> { buff.append("/"); } )
    { jjtThis.setUrl(buff.toString()); }
}

void InlineLink() #InlineLink : {
    Token t;
} {
    t = <INLINE_LINK> { jjtThis.setText(getValue(t)); }
    (
        ( <SPACE> )? t = <INLINE_LINK> { jjtThis.setRefId(getValue(t)); }
        | t = <INLINE_LINK_ATTR> { jjtThis.setAttr(getLinkAttr(t)); }
    )?
}

void Tag() #Tag : {
    Token o, c, n, v;
} {
    <LT> o = <TEXT> { jjtThis.setName(o.image); }
    (
        ( <SPACE> )+ n = <TEXT> "=" v = <QUOTED_TEXT> { jjtThis.addAttr(new TagAttr(n.image, v.image)); }
    )*
    (
        <EMPTY_TAG_CLOSE>
        | <GT> { markupStack.push(o.image); }
        ( Line() ( LOOKAHEAD(2) <EOL> Line() )* )?
        <TAG_END_OPEN> c = <TEXT> <GT> { markupStack.pop(); }
    )
}

void Whitespace() : {} {
    <SPACE> | <TAB>
}