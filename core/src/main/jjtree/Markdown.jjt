options {
    LOOKAHEAD = 2;
    STATIC = false;
    UNICODE_INPUT = true;

    MULTI = true;
    /*
    NODE_EXTENDS = "org.tautua.markdownpapers.Node";
    */
    NODE_PREFIX = "";
    NODE_DEFAULT_VOID = true;
    NODE_USES_PARSER = false;

    DEBUG_PARSER = false;
    DEBUG_TOKEN_MANAGER = false;
    DEBUG_LOOKAHEAD = false;
}

PARSER_BEGIN(Parser)
package org.tautua.markdownpapers.grammar;

public class Parser {

    public Object parse() throws ParseException {
        Document();
        return jjtree.rootNode();
    }

    char getEscapedChar(Token t) {
        return t.image.charAt(1);
    }

    String removeMarks(Token t) {
        return removeMarks(t, 1);
    }
    String removeMarks(Token t, int markLength) {
        return t.image.substring(markLength, t.image.length() - markLength);
    }
}
PARSER_END(Parser)

<DEFAULT, LINKREF_FOLLOWS>
SKIP : {
    < " " >
}

<LINKREF_FOLLOWS>
SKIP : {
    < "\t" >
}

<DEFAULT, CODE_FOLLOWS, LINKREF_FOLLOWS>
SKIP : {
    < "\r" | "\n" | "\r\n" > : DEFAULT
}

<DEFAULT>
TOKEN : {
    < HASH : ("#"){1,6} > : TEXT_FOLLOWS
    | < REFNAME : "[" ( ~["]", " ", "\t"] )* "]" ":" > : LINKREF_FOLLOWS
    | < UNDERSCORE_RULER : ( ( (" "){1,3} )? "_" ){2} ( ( (" "){1,3} )? "_" )+ >
    | < MINUS_RULER : ( ( (" "){1,3} )? "-" ){2} ( ( (" "){1,3} )? "-" )+ >
    | < ASTERISK_RULER : ( ( (" "){1,3} )? "*" ){2} ( ( (" "){1,3} )? "*" )+ >
    | < GT : ">" ( " " )? >
    | < IDENT : (" "){4} | "\t" > : CODE_FOLLOWS
}

<DEFAULT, LI_FOLLOWS>
TOKEN : {
    < LI_PLUS : "+" " " > : LI_FOLLOWS
    | < LI_MINUS : "-" " " > : LI_FOLLOWS
    | < LI_ASTERISK : "*" " "> : LI_FOLLOWS
}

<DEFAULT, INDEXED_LI_FOLLOWS>
TOKEN : {
    < LI_NUMBER : ( ["0"-"9"] )+ "." " "> : INDEXED_LI_FOLLOWS
}

<DEFAULT, TEXT_FOLLOWS, INDEXED_LI_FOLLOWS, LI_FOLLOWS>
TOKEN : {
    < ESCAPED_CHAR : "\\" ["{", "}", "[", "]", "(", ")"
                        , "\\", "`", "_", ">", "#", ".", "!"
                        , "+", "-", "*"] > { if(curLexState == DEFAULT)SwitchTo(TEXT_FOLLOWS); }
    | < CODE_SPAN : "`" ( ~[] )+ "`" > { if(curLexState == DEFAULT)SwitchTo(TEXT_FOLLOWS); }
    | < EMPHASIS_ITALIC : "*" <EMP_A> ( ~["*"] )+ <EMP_A> "*"
                    | "_" <EMP_U> ( ~["_"] )+ <EMP_U> "_"> { if(curLexState == DEFAULT)SwitchTo(TEXT_FOLLOWS); }
    | < EMPHASIS_BOLD : "**" <EMP_A> ( ~["*"] )+ <EMP_A> "**"
                    | "__" <EMP_U> ( ~["_"] )+ <EMP_U> "__"> { if(curLexState == DEFAULT)SwitchTo(TEXT_FOLLOWS); }
    | < EMPHASIS_ITALIC_BOLD : "***" <EMP_A> ( ~["*"] )+ <EMP_A> "***"
                    | "___" <EMP_U> ( ~["_"] )+ <EMP_U> "___"> { if(curLexState == DEFAULT)SwitchTo(TEXT_FOLLOWS); }
    | < TEXT : ~["\r", "\n"] > { if(curLexState == DEFAULT)SwitchTo(TEXT_FOLLOWS);}
    | < INLINE_LINK : "[" ( ~["]", "\r", "\n"] )* "]" > { if(curLexState == DEFAULT)SwitchTo(TEXT_FOLLOWS);}
    | < INLINE_LINK_ATTR : "(" ~[")", "\r", "\n"] ")" > { if(curLexState == DEFAULT)SwitchTo(TEXT_FOLLOWS);}
    | < INLINE_URL : "<" ( ~[">", "\r", "\n"] )* ">" > { if(curLexState == DEFAULT)SwitchTo(TEXT_FOLLOWS); }
    | < CHAR_ENTITY_REF : "&" ( ["a"-"z", "A"-"Z"] )+ ";" > { if(curLexState == DEFAULT)SwitchTo(TEXT_FOLLOWS); }
    | < NUMERIC_CHAR_REF : "&" ( ( ["0"-"9"] ){1,4} | "x" ( ["0"-"9", "a"-"f", "A"-"F"] ){1,4} ) ";" > { if(curLexState == DEFAULT)SwitchTo(TEXT_FOLLOWS); }
    | < #EMP_A : ~["*", " ", "\t", "\r", "\n"] >
    | < #EMP_U : ~["_", " ", "\t", "\r", "\n"] >
}

<TEXT_FOLLOWS, INDEXED_LI_FOLLOWS, LI_FOLLOWS>
TOKEN : {
    < TEXTCHUNK_BREAK : <EOL> ( " " | "\t" )* <EOL> > : DEFAULT 
}

<TEXT_FOLLOWS, INDEXED_LI_FOLLOWS, LI_FOLLOWS, CODE_FOLLOWS>
TOKEN : {
    < EOL : "\r" | "\n" | "\r\n" > {if(curLexState == CODE_FOLLOWS)SwitchTo(DEFAULT);}
}

<CODE_FOLLOWS>
TOKEN : {
    < CODE_TEXT : ~["\r", "\n"] > : CODE_FOLLOWS
}

<LINKREF_FOLLOWS>
TOKEN : {
    < URL : ( ~[" ", "\"", "\t", "\r", "\n"] )+ >
    | < QUOTED_TEXT : "\"" ( ~["\"", "\r", "\n"] )+ "\"" >
}

void Document() #Document : {} {
    ( Element() )* <EOF>
}

void Element() : {} {
    BlockElement() | DocumentElement()
}

void DocumentElement() : {} {
    LinkRef()
}

void BlockElement() : {} {
    Header()
    | Ruler()
    | List()
    | Quote()
    | Paragraph()
    | Code()
}

void Header() #Header : {} {
    <HASH> Line() ( <EOL> )?
}

void Ruler() #Ruler : {} {
    <UNDERSCORE_RULER> | <MINUS_RULER> | <ASTERISK_RULER>
}

void Quote() #Quote : {} {
    <GT> BlockElement()
}

void Code() #Code : {} {
    CodeLine() ( <EOL> CodeLine() )* ( <EOL> )?
}

void CodeLine() #Line : {} {
    <IDENT> CodeText()
}

void CodeText() #Text : {
    Token t;
} {
    (
        t = <CODE_TEXT> { jjtThis.append(t.image); } 
    )+
}

void Link() #InlineLink : {
    Token t;
} {
    t = <INLINE_LINK> { jjtThis.setText(removeMarks(t)); }
    ( <INLINE_LINK_ATTR> | t = <INLINE_LINK> { jjtThis.setRefId(removeMarks(t)); } )?
}

void LinkRef() #LinkRef : {
    Token i, u, t = null;
} {
    i = <REFNAME> { jjtThis.setId(i.image); }
    u = <URL>
    ( t = <QUOTED_TEXT> )?
    { jjtThis.setAttr(new LinkAttr(u.image, t == null ? null : t.image)); }
}

void List() #List : {} {
    ( Item() )+
}

void Item() #Item : {} {
    ( <LI_PLUS> | <LI_MINUS> | <LI_ASTERISK> | <LI_NUMBER> )
    Paragraph()
}

void Paragraph() #Paragraph : {} {
    Line() ( <EOL> Line() )* ( <EOL> | <TEXTCHUNK_BREAK> )?
}

void Line() #Line : {} {
    (
        Emphasis()
        | Codespan()
        | Link()
        | Text()
        | InlineURL()
        | CharRef()
    )+
}

void Text() #Text : {
    Token t;
} {
    (
        t = <ESCAPED_CHAR> { jjtThis.append(getEscapedChar(t)); }
        | t = <TEXT> { jjtThis.append(t.image); }
        | t = <INLINE_LINK_ATTR> { jjtThis.append(t.image); }
    )+
}

void Emphasis() #Emphasis : {
    Token t;
    int markLength = 1;
} {
    (
        t = <EMPHASIS_ITALIC>
        | t = <EMPHASIS_BOLD> { markLength = 2; jjtThis.makeBold(); }
        | t = <EMPHASIS_ITALIC_BOLD> { markLength = 3; jjtThis.makeItalicAndBold();}
    )
    { jjtThis.setText(removeMarks(t, markLength)); }
}

void Codespan() #Codespan : {
    Token t;
} {
    t = <CODE_SPAN> { jjtThis.setText(removeMarks(t)); }
}

void InlineURL() #InlineUrl : {
    Token t;
} {
    t = <INLINE_URL> { jjtThis.setUrl(removeMarks(t)); }
}

void CharRef() #CharRef : {
    Token t;
} {
    ( t = <NUMERIC_CHAR_REF> | t = <CHAR_ENTITY_REF> ) { jjtThis.setValue(t.image); }
}

/* extras
void AbbreviationDef() : {} {
}
void FootnoteDef() : {}{
}
*/