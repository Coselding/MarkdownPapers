options {
    LOOKAHEAD = 1;
    STATIC = false;
    UNICODE_INPUT = true;

    MULTI = true;
    /*
    NODE_EXTENDS = "org.tautua.markdownpapers.Node";
    */
    NODE_PREFIX = "";
    NODE_DEFAULT_VOID = true;
    NODE_USES_PARSER = false;

    DEBUG_PARSER = true;
    DEBUG_TOKEN_MANAGER = false;
    DEBUG_LOOKAHEAD = false;
}

PARSER_BEGIN(Parser)
package org.tautua.markdownpapers.grammar;

import org.tautua.markdownpapers.grammar.util.*;

public class Parser {
    private static final String QUOTE = '"' + "";
    private int quoteBlockLevel = 0;

    int ident;
    int delta;

    public Object parse() throws ParseException {
        jj_input_stream.setTabSize(4);
        Document();
        return jjtree.rootNode();
    }

    char getEscapedChar(Token t) {
        return t.image.charAt(1);
    }

    String getValue(Token t) {
        if (t.kind == CODE_SPAN && t.image.startsWith("``")) {
            return getValue(t, 2);            
        } else if (t.kind == TEXT) {
            return t.image;
        }
        return getValue(t, 1);
    }

    String getValue(Token t, int markLength) {
        return t.image.substring(markLength, t.image.length() - markLength);
    }

    String getTabWhitespace(Token prev, Token tab) {
        int x = (4 - ((prev == null ? 1 : prev.endColumn + 1) % 4)) + 1;
        switch(x) {
            case 1:
                return " ";
            case 2:
                return "  ";
            case 3:
                return "   ";
            default:
                return "    ";
        }
    }


    boolean LineLookahead() {
        int level = 0;
        int i = 1;
        Token t = getToken(i);

        if (t.kind != EOL) {
            return false;
        }

        do {
            t = getToken(++i);
            if(t.kind == GT) {
                level++;
            }
        } while (oneOf(t, SPACE, TAB, GT));

        if (oneOf(t, EOL, EOF)) {
            return false;
        }

        if (quoteBlockLevel < level) {
            return false;
        }

        return true;
    }

    boolean CodeLineLookahead() {
        int level = 0;
        int i = 1;
        int _indent = 0;
        Token t = getToken(i);

        if (t.kind != EOL) {
            return false;
        }

        do {
            t = getToken(++i);
            if(t.kind == GT) {
                level++;
                _indent = 0;
            } else if(t.kind == SPACE) {
                _indent++;
            } else if(t.kind == TAB) {
                _indent += 4;
            }
        } while (oneOf(t, SPACE, TAB, GT)
            && ((level == 0 && _indent < 4) || (level > 0 && _indent <= 4)) );

        if (oneOf(t, EOL, EOF)) {
            return true;
        }

        if ( _indent >= 4 && level <= quoteBlockLevel ) {
            return true;
        }

        return false;
    }

    boolean QuotedElementLookahead() {
        int level = 0;
        int i = 1;
        Token t = getToken(i);

        if (t.kind != EOL) {
            return false;
        }

        do {
            t = getToken(++i);
            if (t.kind == GT) {
                level++;
            }
        } while (oneOf(t, SPACE, TAB, GT));

        if (oneOf(t, EOL, EOF)) {
            return true;
        }

        if (quoteBlockLevel <= level) {
            return true;
        }

        return false;
    }

    boolean ItemLookahead() {
        Token t = getToken(1);

        if (t.kind != EOL) {
            return false;
        }

        boolean empty = true;
        int j = 2;
        do {
            t = getToken(j++);
            if (noneOf(t, EOL, EOF, SPACE, TAB, SPACE, GT)) {
                empty = false;
                break;
            }
        } while(noneOf(t, EOL, EOF));

        if(empty) {
            return true;
        }

        int i = 2;
        int level = 0;
        int _indent = 0;
        do {
            t = getToken(i++);
            if (t.kind == GT) {
                level++;
            } else if (t.kind == SPACE) {
                _indent++;
            } else if (t.kind == TAB) {
                _indent += 4;
            }
        } while (oneOf(t, SPACE, TAB, GT));

        if (oneOf(t, LI_PLUS, LI_MINUS, LI_ASTERISK, LI_NUMBER)
            && (_indent > ident - delta || _indent == ident)) {
            return true;
        }

        return false;
    }


    boolean ListLookahead() {
        int level = 0;
        int _indent = 0;
        int i = 1;
        Token t = getToken(i);

        if (t.kind != EOL) {
            return false;
        }

        do {
            t = getToken(++i);
            if (t.kind == GT) {
                level++;
            } else if (t.kind == SPACE) {
                _indent++;
            } else if (t.kind == TAB) {
                _indent += 4;
            }
        } while (oneOf(t, SPACE, TAB, GT));

        if (oneOf(t, LI_PLUS, LI_MINUS, LI_ASTERISK, LI_NUMBER)
            && _indent > ident) {
            return true;
        }
        
        return false;
    }

    boolean oneOf(Token token, int... kinds) {
        for (int kind : kinds) {
            if(kind == token.kind) {
                return true;
            }
        }
        return false;
    }

    boolean noneOf(Token token, int... kinds) {
        return !oneOf(token, kinds);
    }

    boolean follows(int... args) {
        for(int i = 0; i < args.length; i++) {
            if (args[i] != getToken(i + 1).kind) {
                return false;
            }
        }
        return true;
    }
}
PARSER_END(Parser)

TOKEN_MGR_DECLS : {
    boolean expectBlockEnd;
    int spaces = 0;
    int ident = 0;

    public int getLexicalState() {
        return curLexState;
    }

    void HandleSpace() {
        if (curLexState == DEFAULT) {
            spaces++;
            if (spaces == 4) {
                spaces = 0;
                SwitchTo(CODE_FOLLOWS);
            }
        }
    }

    void HandleTAB() {
        if (curLexState == DEFAULT && spaces == 0) {
            SwitchTo(CODE_FOLLOWS);
        }
    }

    void HandleEOL() {
        if (curLexState != TEXT_FOLLOWS && curLexState != LI_FOLLOWS) {
            SwitchTo(DEFAULT);
        } else if (expectBlockEnd) {
            expectBlockEnd = false;
            SwitchTo(DEFAULT);
        } else {
            expectBlockEnd = true;
        }

        spaces = 0;
    }

    void HandleContent() {
        if (curLexState == DEFAULT) {
            SwitchTo(TEXT_FOLLOWS);
        }
        expectBlockEnd = false;
    }

}

<*>
TOKEN : {
    < SPACE : " " > { HandleSpace(); }
    | < TAB : "\t" > { HandleTAB(); }
    | < EOL : "\r" | "\n" | "\r\n" > { HandleEOL(); }
}

<DEFAULT, LI_FOLLOWS>
TOKEN : {
    < LI_PLUS : "+" (" " | "\t") > : LI_FOLLOWS
    | < LI_MINUS : "-" (" " | "\t") > : LI_FOLLOWS
    | < LI_ASTERISK : "*" (" " | "\t") > : LI_FOLLOWS
    | < LI_NUMBER : ( ["0"-"9"] )+ "." (" " | "\t") > : LI_FOLLOWS
}

<DEFAULT, TEXT_FOLLOWS, LI_FOLLOWS>
TOKEN : {
    < UNDERSCORE_RULER : "_" ( (" "){0,2} )? "_"  ( ( (" "){0,2} )? "_" )+ >
    | < MINUS_RULER : "-" ( (" "){0,2} )? "-" ( ( (" "){0,2} )? "-" )+ >
    | < ASTERISK_RULER : "*" ( (" "){0,2} )? "*" ( ( (" "){0,2} )? "*" )+ >
}

/* PUNCTUATION */
<DEFAULT, HEADER_FOLLOWS, TEXT_FOLLOWS, LI_FOLLOWS>
TOKEN : {
    < AMPERSAND : "&" > { HandleContent(); }
    | < EXCLAMATION : "!" >
    | < HASH : "#" > : HEADER_FOLLOWS
    | < GT : ">" >
    | < LT : "<" > { HandleContent(); }
    | < LPAREN : "(" > { HandleContent(); }
    | < RPAREN : ")" > { HandleContent(); }
    | < LBRACKET : "[" > { HandleContent(); }
    | < RBRACKET : "]" > { HandleContent(); }
    | < COLON : ":" > { HandleContent(); }
    | < SLASH : "/" > { HandleContent(); }
    | < BACKSLASH : "\\" > { HandleContent(); }
    | < EQ : "=" > { HandleContent(); }    
}

<DEFAULT, HEADER_FOLLOWS, TEXT_FOLLOWS, LI_FOLLOWS>
TOKEN : {
    < ESCAPED_CHAR : "\\" ["{", "}", "[", "]", "(", ")"
                        , "\\", "`", "_", ">", "#", ".", "!"
                        , "+", "-", "*"] > { HandleContent(); }
    | < QUOTED_TEXT : "\"" ( ~["\"", "\r", "\n"] )+ "\""
                    | "'" ( ~["'", "\r", "\n"] )+ "'" > { HandleContent(); }
    | < CODE_SPAN : "`" ( ~["`"] )+ "`" | "`" "`" ( ~["'"] )+ "`" "`" > { HandleContent(); }
    | < EMPHASIS_ITALIC : "*" <EMP_A> ( ~["*"] )+ <EMP_A> "*"
                    | "_" <EMP_U> ( ~["_"] )+ <EMP_U> "_"> { HandleContent(); }
    | < EMPHASIS_BOLD : "**" <EMP_A> ( ~["*"] )+ <EMP_A> "**"
                    | "__" <EMP_U> ( ~["_"] )+ <EMP_U> "__"> { HandleContent(); }
    | < EMPHASIS_ITALIC_BOLD : "***" <EMP_A> ( ~["*"] )+ <EMP_A> "***"
                    | "___" <EMP_U> ( ~["_"] )+ <EMP_U> "___"> { HandleContent(); }
    | < CHAR_ENTITY_REF : "&" ( ["a"-"z", "A"-"Z"] )+ ";" > { HandleContent(); }
    | < NUMERIC_CHAR_REF : "&" ( ( ["0"-"9"] ){1,4} | "x" ( ["0"-"9", "a"-"f", "A"-"F"] ){1,4} ) ";" > { HandleContent(); }
    | < TEXT : ( ~["=", "#", "&", ":", "<", ">", "(", ")", "[", "]", " ", "\\", "/", "\t", "\r", "\n"] )+ > { HandleContent(); }
    | < #EMP_A : ~["*", " ", "\t", "\r", "\n"] >
    | < #EMP_U : ~["_", " ", "\t", "\r", "\n"] >
}

<CODE_FOLLOWS>
TOKEN : {
    < CODE_TEXT : ( ~[" ", "\t", "\r", "\n"] )* >
}

void Document() #Document : {} {
    (
    <EOL>
    | Element() ( LOOKAHEAD(2) <EOL> Element() )*
    )*
    <EOF>
}

void Element() : {} {
    LOOKAHEAD( LinkRef() ) DocumentElement() | BlockElement() 
}

void DocumentElement() : {} {
    LinkRef()
}

void BlockElement() : {} {
    Header()
    | LOOKAHEAD( BlankLine() (<EOL> | <EOF>) ) BlankLine()
    | LOOKAHEAD( ( <SPACE> )*  ( <UNDERSCORE_RULER> | <MINUS_RULER> | <ASTERISK_RULER> ) ( <EOL>|<EOF> ) ) Ruler()
    | LOOKAHEAD( ( <SPACE> <SPACE> <SPACE> <SPACE> | <TAB> ) ( <SPACE> | <TAB> )* <CODE_TEXT> ) Code()
    | LOOKAHEAD( QuotePrefix() ) Quote()
    | LOOKAHEAD( ( <SPACE> | <TAB> )* ( <LI_PLUS> | <LI_MINUS> | <LI_ASTERISK> | <LI_NUMBER> ) ) List()
    | Paragraph()
}

void BlankLine() : {} {
    ( <SPACE> | <TAB> )+
}

void Header() #Header : {} {
    "#" ( "#" ( "#" ( "#" ( "#" ( "#" )? )? )? )? )? Line()
}

void Ruler() #Ruler : {} {
    ( <SPACE> )* ( <UNDERSCORE_RULER> | <MINUS_RULER> | <ASTERISK_RULER> )
}

void Quote() #Quote : {
    quoteBlockLevel++;
} {
    QuotePrefix() BlockElement()
    ( LOOKAHEAD( {QuotedElementLookahead()} ) <EOL>
        (
            LOOKAHEAD( QuotePrefix() ) QuotePrefix() ( BlockElement() )?
            | BlankLine()
        )?
    )*
    { quoteBlockLevel--; }
}

void QuotePrefix() : {} {
    ( <SPACE> | <TAB> )* <GT> 
}

void Code() #Code : {} {
    CodeLine()
    ( LOOKAHEAD( {CodeLineLookahead()} ) <EOL>
        (
            LOOKAHEAD( ( <GT> | <SPACE> | <TAB> )* ( <EOL>|<EOF> ) )
            ( <GT> | <SPACE> | <TAB> )* #Line
            | LOOKAHEAD( CodeLine() ) CodeLine()
            | ( LOOKAHEAD( QuotePrefix() ) QuotePrefix() )+ <SPACE> CodeLine()
        )
    )*
}

void CodeLine() #Line : {} {
    ( <SPACE> <SPACE> <SPACE> <SPACE> | <TAB> ) CodeText()
}

void CodeText() #CodeText : {
    Token current;
    Token prev = null;
} {
    (
        (
            current = <SPACE> { jjtThis.append(current.image); }
            | current = <TAB> { jjtThis.append(getTabWhitespace(prev, current)); }
            | current = <CODE_TEXT> { jjtThis.append(current.image); }
        ) { prev = current; }
    )*
}


void LinkRef() #LinkRef : {
    String n, u = null;
    Token t = null;
} {
    ( <SPACE> ( <SPACE> ( <SPACE> )? )? )?
    "[" n = refname() "]" { jjtThis.setId(n); }
    ( <SPACE> )? ":"
    ( <SPACE> | <TAB> )*
    u = url()
    ( <SPACE> | <TAB> )*
    ( t = <QUOTED_TEXT> )? { jjtThis.setAttr(new Location(u, t == null ? null : getValue(t))); }
}


void List() #List : {
    int oldIdent = ident;
    int oldDelta = delta;
} {
    (
        <SPACE> { ident++; }
        | <TAB> { ident += 4; }
        | <GT> { ident = 0; }
    )*          { delta = ident - oldIdent; }
    Item()
    (
        LOOKAHEAD( {ItemLookahead()} ) <EOL>
        ( <SPACE> | <TAB> | <GT> )* ( Item() )?
    )*
    {
        ident = oldIdent;
        delta = oldDelta;
    }
}

void Item() #Item : {} {
    ( <LI_PLUS> | <LI_MINUS> | <LI_ASTERISK> | <LI_NUMBER> )
    ( Line() ( LOOKAHEAD( <EOL> ( <SPACE> | <TAB> )* <TEXT> ) <EOL> Line() )* ) #Paragraph(>1)
    ( LOOKAHEAD( {ListLookahead()} ) <EOL> List() )?
}

void Paragraph() #Paragraph : {} {
    Line() ( LOOKAHEAD( {LineLookahead()} ) <EOL> ( <SPACE> | <TAB> | <GT> )* Line() )*
}

void Line() #Line : {} {
    (
        CharRef()
        | CodeSpan()
        | Emphasis()
        | LOOKAHEAD( InlineURL() ) InlineURL()
        | LOOKAHEAD( Tag() ) Tag()
        | LOOKAHEAD( Image() ) Image()
        | LOOKAHEAD( InlineLink() ) InlineLink()
        | Text()
    )+
}

void Text() #Text : {
    Token t;
} {
        t = <ESCAPED_CHAR> { jjtThis.append(getEscapedChar(t)); }
        | (
            t = <TEXT>
            | t = <HASH>
            | t = <SPACE>
            | t = <TAB>
            | t = <AMPERSAND>
            | t = <LPAREN>
            | t = <RPAREN>
            | t = <LBRACKET>
            | t = <RBRACKET>
            | t = <COLON>
            | t = <SLASH>
            | t = <BACKSLASH>
            | t = <GT>
            | t = <LT>
            | t = <LI_MINUS>
            | t = <LI_PLUS>
            | t = <LI_ASTERISK>
            | t = <UNDERSCORE_RULER>
            | t = <MINUS_RULER>
            | t = <ASTERISK_RULER>
            | t = <EQ>
            | t = <QUOTED_TEXT>
        ) { jjtThis.append(t.image); }
}


void CharRef() #CharRef : {
    Token t;
} {
    ( t = <NUMERIC_CHAR_REF> | t = <CHAR_ENTITY_REF> ) { jjtThis.setValue(t.image); }
}

void CodeSpan() #CodeSpan : {
    Token t;
} {
    t = <CODE_SPAN> { jjtThis.setText(getValue(t)); }
}

void Emphasis() #Emphasis : {
    Token t;
    int markLength = 1;
} {
    (
        t = <EMPHASIS_ITALIC>
        | t = <EMPHASIS_BOLD> { markLength = 2; jjtThis.makeBold(); }
        | t = <EMPHASIS_ITALIC_BOLD> { markLength = 3; jjtThis.makeItalicAndBold(); }
    ) { jjtThis.setText(getValue(t, markLength)); }
}

void InlineURL() #InlineUrl : {
    Token t;
    StringBuilder buff = new StringBuilder();
} {
    <LT>
    t = <TEXT> { buff.append(t.image); }
    ":" { buff.append(":"); }
    ( "/" { buff.append("/"); } )*
    t = <TEXT> { buff.append(t.image); }
    (
        t = <TEXT> { buff.append(t.image); }
        | "/" { buff.append("/"); }
        | "&" { buff.append("&"); }
        | "=" { buff.append("="); }
    )*
    <GT>
    { jjtThis.setUrl(buff.toString()); }
}

void InlineLink() #InlineLink : {
    String text, refid, url;
    Token title = null;
} {
    "["
    text = refname() { jjtThis.setText(text); }
    "]"
    (
        ( <SPACE> )?
        "["
        ( refid = refname() { jjtThis.setRefId(refid); } )?
        "]"
        |
        "("
            (
                url = url()
                (
                    ( <SPACE> | <TAB> )+
                    title = <QUOTED_TEXT>
                )?
                { jjtThis.setAttr(new Location(url, title != null ? getValue(title) : null)); }
                ( <SPACE> )*
            )?
        ")"
    )?
}

void Image() #Image : {
    String text, refid, url;
    Token title = null;
} {
    "!" "["
    text = refname() { jjtThis.setText(text); }
    "]"
    (
        ( <SPACE> )?
        "["
        refid = refname() { jjtThis.setRefId(refid); }
        "]"
        |
        "("
            (
                url = url()
                (
                    ( <SPACE> )+
                    title = <QUOTED_TEXT>
                )?
                { jjtThis.setLocation(new Location(url, title != null ? getValue(title) : null)); }
            )?
            ( <SPACE> )*
        ")"
    )?
}

void Tag() : {
    Token t, a, v;
    java.util.List<TagAttr> attributes = new java.util.ArrayList<TagAttr>();
} {
    (
    LOOKAHEAD(2)
    "<" "/"  t = <TEXT> <GT> #CloseTag { ((CloseTag)jjtree.peekNode()).setName(t.image);}
    |
    <LT> t = <TEXT>
    ( ( <SPACE> )+ a = <TEXT> "=" v = <QUOTED_TEXT> { attributes.add(new TagAttr(a.image, getValue(v))); } )*
    ( "/" ">" #EmptyTag { EmptyTag emptytag = (EmptyTag)jjtree.peekNode(); emptytag.setName(t.image); emptytag.setAttributes(attributes); }
    | <GT> #OpenTag { OpenTag opentag = (OpenTag)jjtree.peekNode(); opentag.setName(t.image); opentag.setAttributes(attributes); })
    )
}

void Whitespace() : {} {
    <SPACE> | <TAB>
}

String refname() : {
    Token t;
    StringBuilder buff = new StringBuilder();
} {
    (
        (
        t = <TEXT>
        | t = <SPACE>
        | t = <TAB>
        | t = <AMPERSAND>
        | t = <LPAREN>
        | t = <RPAREN>
        | t = <LBRACKET>
        | t = <COLON>
        | t = <SLASH>
        | t = <BACKSLASH>
        | t = <GT>
        | t = <LT>
        | t = <EQ>
        ) { buff.append(t.image); }
    )+
    { return buff.toString(); }
}

String url() : {
    Token t;
    StringBuilder buff = new StringBuilder();
} {
     (
     (
        <LT>
        (
            (
            t = <TEXT>
            | t = <AMPERSAND>
            | t = <LPAREN>
            | t = <LBRACKET>
            | t = <RBRACKET>
            | t = <COLON>
            | t = <SLASH>
            | t = <BACKSLASH>
            | t = <HASH>
            | t = <EQ>
            ) { buff.append(t.image); }
        ) +
        <GT>
    )
    | (
        (
        t = <TEXT>
        | t = <AMPERSAND>
        | t = <LPAREN>
        | t = <LBRACKET>
        | t = <RBRACKET>
        | t = <COLON>
        | t = <SLASH>
        | t = <BACKSLASH>
        | t = <HASH>
        | t = <EQ>
        ) { buff.append(t.image); }
    )+
    )
    { return buff.toString(); }
}