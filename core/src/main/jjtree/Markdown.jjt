options {
    LOOKAHEAD = 1;
    STATIC = false;
    UNICODE_INPUT = true;

    MULTI = true;
    /*
    NODE_EXTENDS = "org.tautua.markdownpapers.Node";
    */
    BUILD_NODE_FILES = false;
    NODE_PREFIX = "";
    NODE_DEFAULT_VOID = true;
    NODE_USES_PARSER = false;
    NODE_PACKAGE = "org.tautua.markdownpapers.ast";
    DEBUG_PARSER = false;
    DEBUG_TOKEN_MANAGER = false;
    DEBUG_LOOKAHEAD = false;
}

PARSER_BEGIN(Parser)
package org.tautua.markdownpapers.parser;

import org.tautua.markdownpapers.ast.*;
import org.tautua.markdownpapers.util.*;

public class Parser {
    private static final String EMPTY_STRING = "";
    private static final String QUOTE = '"' + "";

    private Stack<Node> stack = new DequeStack<Node>();
    private Stack<Node> markupStack = new DequeStack<Node>();
    private int currentQuoteLevel = 0;
    private int parentheses;
    private int brackets;

    public Document parse() throws ParseException {
        jj_input_stream.setTabSize(4);
        Document();
        return (Document)getRootNode();
    }

    public Node getRootNode() {
        return jjtree.rootNode();
    }

    char getEscapedChar(Token t) {
        return t.image.charAt(1);
    }

    String getValue(Token t) {
        if (t.kind == CODE_SPAN && t.image.startsWith("``")) {
            return getValue(t, 2);
        } else if (t.kind == TEXT) {
            return t.image;
        }
        return getValue(t, 1);
    }

    String getValue(Token t, int markLength) {
        return t.image.substring(markLength, t.image.length() - markLength);
    }

    String getTabWhitespace(Token prev, Token tab) {
        int x = (4 - ((prev == null ? 1 : prev.endColumn + 1) % 4)) + 1;
        switch(x) {
            case 1:
                return " ";
            case 2:
                return "  ";
            case 3:
                return "   ";
            default:
                return "    ";
        }
    }

    boolean ParagraphLookahead() {
        if (getToken(1).kind != EOL) {
            return false;
        }

        int i = 2;
        int quoteLevel = 0;
        Token t;

        do {
            t = getToken(i++);
            if (t.kind == GT) {
                quoteLevel++;
            } else if (t.kind == EOL) {
                quoteLevel = 0;
            }
        } while(t.oneOfKind(EOL, SPACE, TAB, GT));

        if (t.oneOfKind(PLUS, MINUS, ASTERISK, NUMBERING, EOF)) {
            return false;
        }

        if (currentQuoteLevel == quoteLevel && stack.size() > 0 && stack.peek() instanceof Item
            && ((Item)stack.peek()).getIndentation() < t.beginColumn) {
            return true;
        }

        return false;
    }

    boolean LineLookahead() {
        if (getToken(1).kind != EOL) {
            return false;
        }

        int i = 2;
        int quoteLevel = 0;
        Token t;

        do {
            t = getToken(i++);
            if(t.kind == GT) {
                quoteLevel++;
            }
        } while (t.oneOfKind(SPACE, TAB, GT));

        if (t.oneOfKind(EOL, EOF)) {
            return false;
        }

        if (stack.peek() instanceof Item && t.oneOfKind(PLUS, MINUS, ASTERISK, NUMBERING)) {
            return false;
        }

        if (currentQuoteLevel < quoteLevel) {
            return false;
        }

        return true;
    }

    boolean CodeLineLookahead() {
        if (getToken(1).kind != EOL) {
            return false;
        }

        int i = 2;
        int quoteLevel = 0;
        int _indent = 0;
        Token t;
        
        do {
            t = getToken(i++);
            if(t.kind == GT) {
                quoteLevel++;
                _indent = 0;
            } else if(t.kind == SPACE) {
                _indent++;
            } else if(t.kind == TAB) {
                _indent += 4;
            }
        } while (t.oneOfKind(SPACE, TAB, GT) && _indent < 4);

        if (t.oneOfKind(EOL, EOF)) {
            return true;
        }

        if (currentQuoteLevel >= quoteLevel && _indent >= 4) {
            return true;
        }

        return false;
    }

    boolean QuotedElementLookahead() {
        int level = 0;
        int i = 1;
        Token t = getToken(i);

        if (t.kind != EOL) {
            return false;
        }

        do {
            t = getToken(++i);
            if (t.kind == GT) {
                level++;
            }
        } while (t.oneOfKind(SPACE, TAB, GT));

        if (t.oneOfKind(EOL, EOF)) {
            return true;
        }

        if (currentQuoteLevel <= level) {
            return true;
        }

        return false;
    }

    boolean LooseLookahead() {
        if (getToken(1).kind != EOL) {
            return false;
        }

        int i = 2;
        Token t;
        boolean newline = false;
        do {
            t = getToken(i++);
            if (t.kind == EOL) {
                newline = true;
            }
        } while(t.oneOfKind(SPACE, TAB, EOL));

        Item item = (Item)stack.peek();

        return newline && t.oneOfKind(PLUS, MINUS, ASTERISK, NUMBERING) && item.getIndentation() == t.beginColumn;
    }

    boolean TextLookahead() {
        if (stack.size() > 0 && stack.peek() instanceof Header) {
            int i = 1;
            Token t;
            do {
                t = getToken(i++);
            } while(t.oneOfKind(SHARP));

            return t.noneOfKind(EOL,EOF);
        }

        return getToken(1).noneOfKind(EOL, EOF);
    }

    boolean ListLookahead() {
        if (getToken(1).kind != EOL) {
            return false;
        }

        Item item = (Item)stack.peek();
        Token t;
        int i = 2;
        int quoteLevel = 0;

        do {
            t = getToken(i++);
            if (t.kind == GT) {
                quoteLevel++;
            }
        } while (t.oneOfKind(EOL, SPACE, TAB, GT));

        if (t.oneOfKind(PLUS, MINUS, ASTERISK, NUMBERING)
            && item.getIndentation() < t.beginColumn) {
            return true;
        }
        
        return false;
    }

    boolean ItemLookahead() {
        if (getToken(1).kind != EOL) {
            return false;
        }

        List list = (List)stack.peek();
        Token t;
        int i = 2;
        int quoteLevel = 0;
        do {
            t = getToken(i++);
            if (t.kind == GT) {
                quoteLevel++;
            }
        } while (t.oneOfKind(EOL, SPACE, TAB, GT));

        if (t.oneOfKind(PLUS, MINUS, ASTERISK, NUMBERING)
            && list.getIndentation() == t.beginColumn) {
            return true;
        }

        return false;
    }

    boolean QuoteInsideTitleLookahead(int quoteKind) {
        if (getToken(1).kind == quoteKind) {
            Token t;
            int i = 2;
            do {
                t = getToken(i++);
            } while (t.noneOfKind(quoteKind, RPARENT, EOL, EOF));

            return t.kind == quoteKind;
        }

        return getToken(1).noneOfKind(EOL, EOF);
    }

    boolean NestedParenthesesLookahead() {
        if (getToken(1).kind == RPARENT) {
            Token t;
            int i = 2;
            do {
                t = getToken(i++);
            } while (t.noneOfKind(RPARENT, LT, GT, DOUBLE_QUOTE, SINGLE_QUOTE, SPACE, EOL, EOF));

            return t.kind == RPARENT;
        }

        return getToken(1).noneOfKind(RPARENT, LT, GT, DOUBLE_QUOTE, SINGLE_QUOTE, SPACE, EOL, EOF);
    }
}
PARSER_END(Parser)

/* WHITESPACE */
TOKEN : {
    < SPACE : " " >
    | < TAB : "\t" >
    | < EOL : "\r" | "\n" | "\r\n" >
}

/* PUNCTUATION */
TOKEN : {
    < AMPERSAND : "&" >
    | < BACKTICK : "`" >
    | < EXCLAMATION : "!" >
    | < SHARP : "#" >
    | < GT : ">" >
    | < SINGLE_QUOTE : "'" >
    | < DOUBLE_QUOTE : "\"" >
    | < LT : "<" >
    | < LBRACKET : "[" >
    | < LPARENT : "(" >
    | < RBRACKET : "]" >
    | < RPARENT : ")" >
    | < COLON : ":" >
    | < SLASH : "/" >
    | < BACKSLASH : "\\" >
    | < EQ : "=" >
    | < PLUS : "+" >
    | < MINUS : "-" >
    | < ASTERISK : "*" >
}

TOKEN : {

    < UNDERSCORE_RULER : "_" ( (" "){0,2} )? "_"  ( ( (" "){0,2} )? "_" )+ >
    | < MINUS_RULER : "-" ( (" "){0,2} )? "-" ( ( (" "){0,2} )? "-" )+ >
    | < ASTERISK_RULER : "*" ( (" "){0,2} )? "*" ( ( (" "){0,2} )? "*" )+ >
    | < OP_COMMENT : "<!--" >
    | < CL_COMMENT : "-->" >
}

TOKEN : {
    < CHAR_ENTITY_REF : "&" ( ["a"-"z", "A"-"Z"] )+ ";" >
    | < CODE_SPAN : "`" ( ~["`", "\r", "\n"] )+ "`" | "`" "`" ( ~["'", "\r", "\n"] )+ "`" "`" >
    | < EMPHASIS_ITALIC : "*" <EMP_A> ( ( ~["*"] )* <EMP_A> )? "*"
                    | "_" <EMP_U> ( ( ~["_"] )* <EMP_U> )? "_">
    | < EMPHASIS_BOLD : "**" <EMP_A> ( ( ~["*"] )* <EMP_A> )? "**"
                    | "__" <EMP_U> ( ( ~["_"] )* <EMP_U> )? "__">
    | < EMPHASIS_ITALIC_BOLD : "***" <EMP_A> ( ( ~["*"] )* <EMP_A> )? "***"
                    | "___" <EMP_U> ( ( ~["_"] )* <EMP_U> )? "___">
    | < ESCAPED_CHAR : "\\" ["{", "}", "[", "]", "(", ")", "\\", "`", "_", ">", "#", ".", "!", "+", "-", "*"] >
    | < NUMBERING : ( ["0"-"9"] )+ "." >
    | < NUMERIC_CHAR_REF : "&" ( ( ["0"-"9"] ){1,4} | "x" ( ["0"-"9", "a"-"f", "A"-"F"] ){1,4} ) ";" >
    | < TEXT : ( ~["=", "#", "&", "*", "\"", "'", "`", ":", "<", ">", "(", ")", "[", "]", " ", "\\", "/", "\t", "\r", "\n"] )+ >
    | < #EMP_A : ~["*", " ", "\t", "\r", "\n"] >
    | < #EMP_U : ~["_", " ", "\t", "\r", "\n"] >
}

void Document() #Document : {} {
    (
    <EOL>
    | Element() ( LOOKAHEAD(2) <EOL> Element() )*
    )*
    <EOF>
}

void Element() : {} {
    LOOKAHEAD( ResourceDefinition() ) DocumentElement() | BlockElement()
}

void DocumentElement() : {} {
    ResourceDefinition()
}

void BlockElement() : {} {
    Header()
    | LOOKAHEAD( SetextHeader() ( <EOL> | <EOF> ) ) SetextHeader()
    | LOOKAHEAD( EmptyLine() ) Whitespace()
    | LOOKAHEAD( ( InsignificantWhitespace() )? ( <UNDERSCORE_RULER> | <MINUS_RULER> | <ASTERISK_RULER> ) ( <EOL> | <EOF> ) ) Ruler()
    | LOOKAHEAD( CodeLine() ) Code()
    | LOOKAHEAD( QuotePrefix() ) Quote()
    | LOOKAHEAD( ( InsignificantWhitespace() )? ( <PLUS> | <MINUS> | <ASTERISK> | <NUMBERING> ) ) List()
    | LOOKAHEAD( Comment() ) Comment()
    | Paragraph()
}

void Whitespace() : {} {
    ( <SPACE> | <TAB> )+
}

void InsignificantWhitespace() : {} {
    <SPACE> ( <SPACE> ( <SPACE> )? )?
}

void EmptyLine() : {} {
    ( Whitespace() )? ( <EOL> | <EOF> )
}

void Header() #Header : {
    int level = 1;
    stack.push(jjtThis);
} {

    level = HeaderPrefix()
    Line() ( "#" )*
    {   jjtThis.setLevel(level);
        stack.pop();    }
}

int HeaderPrefix() : {
    int level = 1;
} {
    "#" ( "#" { level++; } ( "#" { level++; } ( "#" { level++; } ( "#" { level++; } ( "#" { level++; } )? )? )? )? )?
    { return level; }
}

void SetextHeader() #Header : {}{
    Line() < EOL >
    (
        ( < EQ > )+ { jjtThis.setLevel(1); }
        | < MINUS_RULER > { jjtThis.setLevel(2); }
        | < MINUS > { jjtThis.setLevel(2); }
    )
}

void Ruler() #Ruler : {} {
    ( InsignificantWhitespace() )? ( <UNDERSCORE_RULER> | <MINUS_RULER> | <ASTERISK_RULER> )
}

void Quote() #Quote : {
    stack.push(jjtThis);
    currentQuoteLevel++;
} {
    QuotePrefix() BlockElement()
    ( LOOKAHEAD( {QuotedElementLookahead()} ) <EOL>
        (
            LOOKAHEAD( ( Whitespace() )? <EOL> | <EOF> ) Whitespace() #Line
            | LOOKAHEAD( QuotePrefix() ) QuotePrefix() ( BlockElement() )?

        )?
    )*
    {
    currentQuoteLevel--;
    stack.pop();
    }
}

void QuotePrefix() : {} {
    ( InsignificantWhitespace() )? <GT> ( <SPACE> )?
}

void Code() #Code : {} {
    CodeLine()
    ( LOOKAHEAD( {CodeLineLookahead()} ) <EOL>
        ( LOOKAHEAD( QuotePrefix() ) QuotePrefix() )*
        (
            LOOKAHEAD( ( Whitespace() )? <EOL> | <EOF> ) ( Whitespace() )? #Line
            | CodeLine()
        )
    )*
}

void CodeLine() #Line : {} {
    CodeLinePrefix() CodeText()
}

void CodeLinePrefix() : {} {
    <SPACE> <SPACE> <SPACE> <SPACE> | <TAB>
}

void CodeText() #CodeText : {
    Token t;
    Token prev = null;
} {
    (
        (
            (
                t = <SPACE>
                | t = <AMPERSAND>
                | t = <BACKTICK>
                | t = <EMPHASIS_ITALIC>
                | t = <EMPHASIS_BOLD>
                | t = <EMPHASIS_ITALIC_BOLD>
                | t = <ESCAPED_CHAR>
                | t = <EXCLAMATION>
                | t = <NUMERIC_CHAR_REF>
                | t = <CHAR_ENTITY_REF>
                | t = <TEXT>
                | t = <SHARP>
                | t = <LPARENT>
                | t = <RPARENT>
                | t = <LBRACKET>
                | t = <RBRACKET>
                | t = <CODE_SPAN>
                | t = <COLON>
                | t = <SLASH>
                | t = <BACKSLASH>
                | t = <GT>
                | t = <LT>
                | t = <MINUS>
                | t = <PLUS>
                | t = <ASTERISK>
                | t = <UNDERSCORE_RULER>
                | t = <MINUS_RULER>
                | t = <NUMBERING>
                | t = <ASTERISK_RULER>
                | t = <EQ>
                | t = <SINGLE_QUOTE>
                | t = <DOUBLE_QUOTE>
                | t = <OP_COMMENT>
                | t = <CL_COMMENT>
            ) { jjtThis.append(t.image); }
            | t = <TAB> { jjtThis.append(getTabWhitespace(prev, t)); }
        ) { prev = t; }
    )*
}


void ResourceDefinition() #ResourceDefinition : {
    String n = null;
    Resource resource;
} {
    ( <SPACE> ( <SPACE> ( <SPACE> )? )? )?
    "[" n = refname() "]" { jjtThis.setId(n); }
    ( <SPACE> )? ":"
    ( Whitespace() )?
    resource = Resource() { jjtThis.setResource(resource); }
}

void List() #List : {
    stack.push(jjtThis);
} {
    ( <SPACE> | <TAB> | <GT> )*
    Item()
    (
        LOOKAHEAD( {ItemLookahead()} ) <EOL>
        ( <SPACE> | <TAB> | <GT> )* ( Item() )?
    )*

    {
        stack.pop();
    }
}

void Item() #Item : {
    stack.push(jjtThis);
    Token t;
} {
    (
        (
            t = <PLUS>
            | t = <MINUS>
            | t = <ASTERISK>
            | t = <NUMBERING> { jjtThis.makeOrdered(); }
        )
        ( <SPACE> | <TAB> )
    ) { jjtThis.setIndentation(t.beginColumn); }
    Paragraph()
    (
        LOOKAHEAD( {ParagraphLookahead()} ) <EOL> ( LOOKAHEAD( EmptyLine() ) ( Whitespace() )? <EOL> )* Paragraph() { jjtThis.makeLoose(); }
        | LOOKAHEAD( {ListLookahead()} ) <EOL> ( LOOKAHEAD( EmptyLine() ) ( Whitespace() )? <EOL> )* List()
        | LOOKAHEAD( {LooseLookahead()} ) <EOL> ( Whitespace() )? { jjtThis.makeLoose(); }
    )*
    {
        Item item = (Item)stack.pop();
        List list = (List)stack.peek();
        if (list.getIndentation() == 0) {
            list.setIndentation(item.getIndentation());
        } 
    }
}

void Paragraph() #Paragraph : {} {
    Line()
    ( LOOKAHEAD( {LineLookahead()} ) <EOL> ( <SPACE> | <TAB> | <GT> )* Line() )*
}

void Line() #Line : {} {
    (LOOKAHEAD( {TextLookahead()} )
        (
        CharRef()
        | CodeSpan()
        | Emphasis()
        | LOOKAHEAD( InlineURL() ) InlineURL()
        | LOOKAHEAD( Tag() ) Tag()
        | LOOKAHEAD( Image() ) Image()
        | LOOKAHEAD( Link() ) Link()
        | Text()
        )
    )+
}

void Text() #Text : {
    Token t;
} {
        t = <ESCAPED_CHAR> { jjtThis.append(getEscapedChar(t)); }
        | (
            t = <TEXT>
            | t = <SHARP>
            | t = <SPACE>
            | t = <TAB>
            | t = <AMPERSAND>
            | t = <BACKTICK>
            | t = <LPARENT>
            | t = <RPARENT>
            | t = <LBRACKET>
            | t = <RBRACKET>
            | t = <COLON>
            | t = <SLASH>
            | t = <BACKSLASH>
            | t = <GT>
            | t = <LT>
            | t = <MINUS>
            | t = <PLUS>
            | t = <NUMBERING>
            | t = <ASTERISK>
            | t = <UNDERSCORE_RULER>
            | t = <MINUS_RULER>
            | t = <ASTERISK_RULER>
            | t = <EQ>
            | t = <SINGLE_QUOTE>
            | t = <DOUBLE_QUOTE>
        ) { jjtThis.append(t.image); }
}

void CharRef() #CharRef : {
    Token t;
} {
    ( t = <NUMERIC_CHAR_REF> | t = <CHAR_ENTITY_REF> ) { jjtThis.setValue(t.image); }
}

void CodeSpan() #CodeSpan : {
    Token t;
} {
    t = <CODE_SPAN> { jjtThis.setText(getValue(t)); }
}

void Emphasis() #Emphasis : {
    Token t;
    int markLength = 1;
} {
    (
        t = <EMPHASIS_ITALIC>
        | t = <EMPHASIS_BOLD> { markLength = 2; jjtThis.makeBold(); }
        | t = <EMPHASIS_ITALIC_BOLD> { markLength = 3; jjtThis.makeItalicAndBold(); }
    ) { jjtThis.setText(getValue(t, markLength)); }
}

void Comment() #Comment : {
    StringBuilder buff = new StringBuilder();
    Token t;
} {
    <OP_COMMENT>
    (
        (
        t = <TEXT>
        | t = <SPACE>
        | t = <TAB>
        | t = <AMPERSAND>
        | t = <BACKTICK>
        | t = <EXCLAMATION>
        | t = <SHARP>
        | t = <GT>
        | t = <LT>
        | t = <LPARENT>
        | t = <RPARENT>
        | t = <LBRACKET>
        | t = <RBRACKET>
        | t = <COLON>
        | t = <SLASH>
        | t = <BACKSLASH>
        | t = <EQ>
        | t = <MINUS_RULER>
        | t = <UNDERSCORE_RULER>
        | t = <ASTERISK_RULER>
        | t = <EOL>
        ) { buff.append(t.image); }
    )*
    { jjtThis.setText(buff.toString()); }
    <CL_COMMENT>
}

void InlineURL() #InlineUrl : {
    Token t;
    StringBuilder buff = new StringBuilder();
} {
    <LT>
    t = <TEXT> { buff.append(t.image); }
    ":" { buff.append(":"); }
    ( "/" { buff.append("/"); } )*
    t = <TEXT> { buff.append(t.image); }
    (
        t = <TEXT> { buff.append(t.image); }
        | "/" { buff.append("/"); }
        | "&" { buff.append("&"); }
        | "=" { buff.append("="); }
    )*
    <GT>
    { jjtThis.setUrl(buff.toString()); }
}

void Link() #Link : {
    String text, reference = "";
    Resource resource = null;
} {
    "["
        (
        CharRef()
        | CodeSpan()
        | Emphasis()
        | LOOKAHEAD( InlineURL() ) InlineURL()
        | LOOKAHEAD( Image() ) Image()
        | LOOKAHEAD( Link() ) Link()
        | LOOKAHEAD( {getToken(1).noneOfKind(RBRACKET, EOL, EOF)}) Text()
        | <EOL> #Text { ((Text)jjtree.peekNode()).append("\n"); } 
        )+
    "]"
    (
        LOOKAHEAD(3)
        (
            ( <SPACE> { jjtThis.setWhitespaceAtMiddle(); } )? ( <EOL> )?
            "["
                ( reference = refname() )?
                { jjtThis.setReference(reference); }
            "]"
            |
            "("
                ( resource = Resource() )?
                ( Whitespace() )?
                { jjtThis.setResource(resource); }
            ")"
        )
    )?
}

void Image() #Image : {
    String text, reference;
    Resource resource = null;
} {
    "!" "["
    text = refname() { jjtThis.setText(text); }
    "]"
    (
        ( <SPACE> )?
        "["
        reference = refname() { jjtThis.setReference(reference); }
        "]"
        |
        "("
            (resource = Resource() { jjtThis.setResource(resource); })?
            ( Whitespace() )?
        ")"
    )?
}

void Tag() : {
    Token t;
    TagAttribute attribute;
    java.util.List<TagAttribute> attributes = new java.util.ArrayList<TagAttribute>();
} {
    (
    LOOKAHEAD(2)
    "<" "/"  t = <TEXT> <GT> #ClosingTag
    {
        ClosingTag closing = ((ClosingTag)jjtree.peekNode());
        closing.setName(t.image);
        if (markupStack.size() > 0) {
            OpeningTag opening = (OpeningTag)markupStack.peek();
            if (opening.getName().equals(closing.getName())) {
                opening.setClosingTag(closing);
                markupStack.pop();
            } else {
                markupStack.clear();
            }
        }
    }
    |
    "<" t = <TEXT>
    (
        LOOKAHEAD( ( <SPACE> )+ <TEXT> )
        ( <SPACE> )+ attribute = TagAttribute() { attributes.add(attribute); }
    )* ( <SPACE> )*
    (
        "/" ">" #EmptyTag { EmptyTag emptytag = (EmptyTag)jjtree.peekNode(); emptytag.setName(t.image); emptytag.setAttributes(attributes); }
        | ">" #OpeningTag { OpeningTag opening = (OpeningTag)jjtree.peekNode(); opening.setName(t.image); opening.setAttributes(attributes); markupStack.push(opening); })
    )
}

TagAttribute TagAttribute() : {
    StringBuilder buff = new StringBuilder();
    Token attrName;
    Token t;
} {
    attrName = <TEXT> "="
    (
        <DOUBLE_QUOTE>
        (
            (
                t = <CODE_SPAN>
                | t = <ESCAPED_CHAR>
                | t = <SPACE>
                | t = <TAB>
                | t = <TEXT>
                | t = "&"
                | t = "("
                | t = ")"
                | t = "<"
                | t = ">"
                | t = "/"
                | t = "\\"
                | t = "'"
                | t = "`"

            ) { buff.append(t.image); }
        )*
        <DOUBLE_QUOTE>
        |
        <SINGLE_QUOTE>
        (
            (
                t = <CODE_SPAN>
                | t = <ESCAPED_CHAR>
                | t = <SPACE>
                | t = <TAB>
                | t = <TEXT>
                | t = "&"
                | t = "("
                | t = ")"
                | t = "<"
                | t = ">"
                | t = "/"
                | t = "\\"
                | t = "\""
                | t = "`"

            ) { buff.append(t.image); }
        )*
        <SINGLE_QUOTE>
    )
    {
        return new TagAttribute(attrName.image, buff.toString());
    }
}

String refname() : {
    Token t;
    StringBuilder buff = new StringBuilder();
} {
    (
        (
        t = <TEXT>
        | t = <SPACE>
        | t = <TAB>
        | t = <AMPERSAND>
        | t = <LPARENT>
        | t = <RPARENT>
        | t = <LBRACKET>
        | t = <COLON>
        | t = <SLASH>
        | t = <BACKSLASH>
        | t = <GT>
        | t = <LT>
        | t = <EQ>
        ) { buff.append(t.image); }
    )+
    { return buff.toString(); }
}

Resource Resource() : {
    String url;
    String hint = null;
} {
    url = url()
    (
        Whitespace()
        hint = title()
    )?
    { return new Resource(url, hint); }
}

String url() : {
    String text;
} {
    (
        <LT>
        text = urltext()
        <GT>
        |
        text = urltext()
    )
    { return text; }
}

String urltext() : {
    Token t;
    StringBuilder buff = new StringBuilder();
} {
    (
        (
        t = <TEXT>
        | t = "&"
        | t = "(" { parentheses++; }
        | LOOKAHEAD({parentheses > 0}) t = ")" { parentheses--; }
        | t = "["
        | t = "]"
        | t = ":"
        | t = "/"
        | t = "\\"
        | t = "#"
        | t = "="
        ) { buff.append(t.image); }
    ) +
    { parentheses = 0; return buff.toString(); }
}

String title() : {
    String text;
} {
    (
        (
            <DOUBLE_QUOTE>
            text = titletext(DOUBLE_QUOTE)
            <DOUBLE_QUOTE>
        )
        |
        (
            <SINGLE_QUOTE>
            text = titletext(SINGLE_QUOTE)
            <SINGLE_QUOTE>
        )
    )
    { return text; }
}

String titletext(int quoteType) : {
    StringBuilder buff = new StringBuilder();
    Token t;
} {
    (
        LOOKAHEAD( {QuoteInsideTitleLookahead(quoteType)} )
        (
            t = <TEXT>
            | t = <SPACE>
            | t = <TAB>
            | t = "&"
            | t = "("
            | t = ")"
            | t = "/"
            | t = "\\"
            | t = "'"
            | t = "\""
        ) { buff.append(t.image); }
    )*
    { return buff.toString(); }
}
