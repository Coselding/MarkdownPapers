options {
	LOOKAHEAD = 1;
	STATIC = false;
	UNICODE_INPUT = true;


	MULTI = true;
	/*
	NODE_EXTENDS = "org.tautua.markdownpapers.Node";
	*/
	NODE_PREFIX = "";
	NODE_DEFAULT_VOID = true;
    NODE_USES_PARSER = false;


	DEBUG_PARSER = false;
	DEBUG_TOKEN_MANAGER = false;
	DEBUG_LOOKAHEAD = false;
}

PARSER_BEGIN(MarkdownParser)
package org.tautua.markdownpapers.grammar;

public class MarkdownParser {

    public Object parse() throws ParseException {
        Document();
        return jjtree.rootNode();                
    }

    boolean isLastNodeAText() {
        try {
            return jjtree.peekNode() instanceof Text;
        } catch (Exception e) {
            return false;
        }
    }
}
PARSER_END(MarkdownParser)

<*>
TOKEN : {
    < EOL : "\n" | "\r" | "\r\n" > : DEFAULT
	| < #NOT_WHITESPACE : ~[" ", "\t"] >
	| < #NOT_EOL : ~["\n", "\r"] >
}

<DEFAULT>
TOKEN : {
	< HASH : ("#"){1,6} > : TEXTCHUNKS_FOLLOWS
	| < REFNAME : "[" ( ~[" ", "\t", "]"] )* "]" ":" > : ON_DOC_ELEMENT__LINKREF
	| < UNDERSCORE_RULER : ( ( (" "){1,3} )? "_" ){2} ( ( (" "){1,3} )? "_" )+ >
	| < MINUS_RULER : ( ( (" "){1,3} )? "-" ){2} ( ( (" "){1,3} )? "-" )+ >
	| < ASTERISK_RULER : ( ( (" "){1,3} )? "*" ){2} ( ( (" "){1,3} )? "*" )+ >
	| < LIST_PLUS : "+" " " > : TEXTCHUNKS_FOLLOWS
	| < LIST_MINUS : "-" " " > : TEXTCHUNKS_FOLLOWS
	| < LIST_ASTERISK : "*" " "> : TEXTCHUNKS_FOLLOWS
	| < LIST_NUMBER : ( ["0"-"9"] )+ "." " "> : TEXTCHUNKS_FOLLOWS
	| < GT : ">" ( " " )? >
}

<DEFAULT, TEXTCHUNKS_FOLLOWS>
TOKEN : {
	< ESCAPED_CHAR : "\\" ["{", "}", "[", "]", "(", ")"
						, "\\", "`", "_", ">", "#", ".", "!"
						, "+", "-", "*"] > : TEXTCHUNKS_FOLLOWS
	| < CODE_SPAN : "`" ( ~[] )+ "`" >
	| < EMPHASIS_1 : "*" <_EMP_> ( ~["*"] )+ <_EMP_> "*" 
					| "_" <_EMP_> ( ~["_"] )+ <_EMP_> "_"> : TEXTCHUNKS_FOLLOWS
	| < EMPHASIS_2 : "**" <_EMP_> ( ~["*"] )+ <_EMP_> "**" 
					| "__" <_EMP_> ( ~["_"] )+ <_EMP_> "__"> : TEXTCHUNKS_FOLLOWS
	| < EMPHASIS_3 : "***" <_EMP_> ( ~["*"] )+ <_EMP_> "***" 
					| "___" <_EMP_> ( ~["_"] )+ <_EMP_> "___"> : TEXTCHUNKS_FOLLOWS
	| < TEXT : <NOT_EOL> > : TEXTCHUNKS_FOLLOWS
	| < #_EMP_ : ~[" ", "\t", "\n", "\r"] >
}

<DEFAULT, EXPECT_RAWTEXT>
TOKEN : {
	< MINOR_IDENT : (" "){1,3} >
	| < IDENT : (" "){4} | "\t" > : EXPECT_RAWTEXT
}

<EXPECT_RAWTEXT, RAWTEXT_FOLLOWS>
TOKEN : {
	< RAWTEXT : ~["\n", "\r"] > : RAWTEXT_FOLLOWS
}

<ON_DOC_ELEMENT__LINKREF>
TOKEN : {
	< URL : ( ~[" ", "\"", "\t", "\n", "\r"] )+ > /*<NOT_WHITESPACE>*/
	| < QUOTED_TEXT : "\"" ( ~["\n", "\r"] )+ "\"" >
}

<ON_DOC_ELEMENT__LINKREF>
SKIP : {
	" " | "\t"
}

void Document() #Document : {} {
    content() ( <EOL> content() )*
	<EOF>
}

void content() : {} {
    Header()
    | Ruler()
    | Quote()
	| LOOKAHEAD(2) ( <MINOR_IDENT> )?
	    (
	        LinkRef()
    	    | List()
            | textchunks()
	    )
    | LOOKAHEAD( ( <IDENT> | <MINOR_IDENT> )* ( <EOL> | <EOF> ) ) empty()
    | Code()
}

void empty() #EmptyLine : {} {
    ( <IDENT> | <MINOR_IDENT> )*
}

void Header() #Header : {} {
	<HASH> textchunks()
}

void Ruler() #Ruler : {} {
	<UNDERSCORE_RULER> | <MINUS_RULER> | <ASTERISK_RULER>
}

void Quote() #Quote : {} {
	<GT> content()
}

void Code() #Code : {} {
	<IDENT> ( <IDENT> | <MINOR_IDENT> )* ( <RAWTEXT> )+
}

void LinkRef() #LinkRef : {} {
	<REFNAME> <URL> ( <QUOTED_TEXT> )?
}

void List() #Item : {} {
	(
		<LIST_PLUS> | <LIST_MINUS> | <LIST_ASTERISK> | <LIST_NUMBER>
	)
	textchunks()
}

void textchunks() #Line : {
} {
	(
		<TEXT> #Text( !isLastNodeAText() ) //if true we just need to append to the previous Text node.
		| ( <EMPHASIS_1> | <EMPHASIS_2>	| <EMPHASIS_3> ) #Emphasis 
		| <ESCAPED_CHAR>
		| <CODE_SPAN> #Codespan
	)+
}

/* extras
void AbbreviationDef() : {} {
}
void FootnoteDef() : {}{
}
*/